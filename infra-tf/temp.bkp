# Provider configuration
provider "aws" {
  region = "us-east-1" # Replace with your desired region
}

# Create a VPC
resource "aws_vpc" "my_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "my-vpc"
  }
}

# Create Private Subnet in AZ 1
resource "aws_subnet" "private_subnet_1" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a" # Replace with the desired AZ
  map_public_ip_on_launch = false
  tags = {
    Name = "private-subnet-1"
  }
}

# Create Private Subnet in AZ 2
resource "aws_subnet" "private_subnet_2" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-east-1b" # Replace with the desired AZ
  map_public_ip_on_launch = false
  tags = {
    Name = "private-subnet-2"
  }
}

# Create a Route Table for Private Subnets
resource "aws_route_table" "private_route_table" {
  vpc_id = aws_vpc.my_vpc.id
  tags = {
    Name = "private-route-table"
  }
}

# Associate Route Table with Private Subnet 1
resource "aws_route_table_association" "private_subnet_1_association" {
  subnet_id      = aws_subnet.private_subnet_1.id
  route_table_id = aws_route_table.private_route_table.id
}

# Associate Route Table with Private Subnet 2
resource "aws_route_table_association" "private_subnet_2_association" {
  subnet_id      = aws_subnet.private_subnet_2.id
  route_table_id = aws_route_table.private_route_table.id
}


# Target Group Attachment
resource "aws_lb_target_group_attachment" "ec2_attachment" {
  target_group_arn = aws_lb_target_group.my_target_group.arn
  target_id        = aws_instance.my_instance.id
  port             = 80 # The port the EC2 instance is listening on
}

# Existing Resources
resource "aws_lb_target_group" "my_target_group" {
  name     = "my-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.my_vpc.id
}

resource "aws_instance" "my_instance" {
  ami           = "ami-0c02fb55956c7d316" # Replace with valid AMI ID
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.private_subnet.id

  tags = {
    Name = "My-EC2-Instance"
  }
}





provider "aws" {
  region = "us-east-1" # Update your region
}

# API Gateway REST API
resource "aws_api_gateway_rest_api" "my_api" {
  name = "MyRestApi"
}

# API Gateway Resource
resource "aws_api_gateway_resource" "api_resource" {
  rest_api_id = aws_api_gateway_rest_api.my_api.id
  parent_id   = aws_api_gateway_rest_api.my_api.root_resource_id
  path_part   = "my-resource" # The path for this resource (e.g., /my-resource)
}

# API Gateway Method
resource "aws_api_gateway_method" "http_method" {
  rest_api_id   = aws_api_gateway_rest_api.my_api.id
  resource_id   = aws_api_gateway_resource.api_resource.id
  http_method   = "ANY"
  authorization = "NONE"
}

# VPC Link
resource "aws_api_gateway_vpc_link" "vpc_link" {
  name = "MyVpcLink"

  target_arns = [aws_lb.lb.arn] # Private ALB ARN
}

# API Gateway Integration
resource "aws_api_gateway_integration" "alb_integration" {
  rest_api_id             = aws_api_gateway_rest_api.my_api.id
  resource_id             = aws_api_gateway_resource.api_resource.id
  http_method             = aws_api_gateway_method.http_method.http_method
  integration_http_method = "ANY"
  type                    = "HTTP"
  uri                     = aws_lb.lb.dns_name
  connection_type         = "VPC_LINK"
  connection_id           = aws_api_gateway_vpc_link.vpc_link.id
}

# API Gateway Deployment
resource "aws_api_gateway_deployment" "api_deployment" {
  rest_api_id = aws_api_gateway_rest_api.my_api.id
  stage_name  = "default"

  depends_on = [aws_api_gateway_integration.alb_integration]
}

# Private Application Load Balancer
resource "aws_lb" "lb" {
  name               = "my-private-alb"
  internal           = true # Make it private
  load_balancer_type = "application"
  security_groups    = [aws_security_group.lb_sg.id]
  subnets            = [aws_subnet.my_subnet.id] # Replace with your private subnet IDs
}

resource "aws_security_group" "lb_sg" {
  name_prefix = "private-alb-sg"
}

resource "aws_subnet" "my_subnet" {
  # Replace with your subnet details
}

output "api_endpoint" {
  value = aws_api_gateway_deployment.api_deployment.invoke_url
}




















provider "aws" {
  region = "us-east-1" # Update your region
}

# Create the EC2 instance
resource "aws_instance" "my_instance" {
  ami           = "ami-0abcdef1234567890" # Replace with a valid AMI ID
  instance_type = "t2.micro"

  tags = {
    Name = "MyInstance"
  }
}

# Create a Target Group
resource "aws_lb_target_group" "my_target_group" {
  name     = "my-nlb-target-group"
  port     = 80
  protocol = "TCP"
  vpc_id   = aws_vpc.my_vpc.id

  health_check {
    protocol = "TCP"
  }
}

# Register the EC2 instance to the Target Group
resource "aws_lb_target_group_attachment" "my_target_group_attachment" {
  target_group_arn = aws_lb_target_group.my_target_group.arn
  target_id        = aws_instance.my_instance.id
  port             = 80
}

# Create a Network Load Balancer
resource "aws_lb" "my_nlb" {
  name               = "my-nlb"
  internal           = false
  load_balancer_type = "network"
  subnets            = aws_subnet.my_subnet.*.id # Replace with your subnet IDs

  enable_deletion_protection = false

  tags = {
    Name = "MyNLB"
  }
}

# Create a Listener for the NLB
resource "aws_lb_listener" "my_nlb_listener" {
  load_balancer_arn = aws_lb.my_nlb.arn
  port              = 80
  protocol          = "TCP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.my_target_group.arn
  }
}

# VPC (if not already existing)
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "MyVPC"
  }
}

# Subnets for the VPC
resource "aws_subnet" "my_subnet" {
  count                   = 2
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = cidrsubnet(aws_vpc.my_vpc.cidr_block, 8, count.index)
  availability_zone       = data.aws_availability_zones.available.names[count.index]

  tags = {
    Name = "MySubnet-${count.index}"
  }
}

# Get availability zones
data "aws_availability_zones" "available" {}




provider "aws" {
  region = "us-east-1" # Update with your desired region
}

# ALB Target Group
resource "aws_lb_target_group" "my_target_group" {
  name     = "my-alb-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.my_vpc.id

  health_check {
    protocol = "HTTP"
    path     = "/health"   # Specify the endpoint for health checks
    interval = 30          # Time between health checks (in seconds)
    timeout  = 5           # Maximum time to wait for a health check response
    healthy_threshold = 2  # Number of consecutive successes for a target to be considered healthy
    unhealthy_threshold = 2 # Number of consecutive failures for a target to be considered unhealthy
  }
}

# VPC for Target Group (if not already existing)
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "MyVPC"
  }
}

output "target_group_arn" {
  value = aws_lb_target_group.my_target_group.arn
}






# IAM Role for CloudWatch Logs
resource "aws_iam_role" "api_gateway_cw_role" {
  name = "api_gateway_cloudwatch_logs_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "apigateway.amazonaws.com"
        }
        Sid = ""
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "cw_policy" {
  name       = "api_gateway_cw_policy"
  role       = aws_iam_role.api_gateway_cw_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonAPIGatewayPushToCloudWatchLogs"
}

# API Gateway Account Settings
resource "aws_api_gateway_account" "api_gateway_account" {
  cloudwatch_role_arn = aws_iam_role.api_gateway_cw_role.arn
}

# API Gateway Stage Settings
resource "aws_api_gateway_stage" "api_gateway_stage" {
  rest_api_id = aws_api_gateway_rest_api.api_gateway_rest_api.id
  stage_name  = "dev"

  method_settings {
    http_method = "*"
    logging_level = "INFO"
    data_trace_enabled = true
  }

  # ... other stage settings ...
}